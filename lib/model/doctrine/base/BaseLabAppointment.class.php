<?php

/**
 * BaseLabAppointment
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $equipment_id
 * @property integer $user_id
 * @property date $appointment_date
 * @property time $starts_at
 * @property time $ends_at
 * @property enum $appointment_type
 * @property enum $event_status
 * @property boolean $is_synched
 * @property LabEquipment $LabEquipment
 * @property LabUser $LabUser
 * 
 * @method integer        getEquipmentId()      Returns the current record's "equipment_id" value
 * @method integer        getUserId()           Returns the current record's "user_id" value
 * @method date           getAppointmentDate()  Returns the current record's "appointment_date" value
 * @method time           getStartsAt()         Returns the current record's "starts_at" value
 * @method time           getEndsAt()           Returns the current record's "ends_at" value
 * @method enum           getAppointmentType()  Returns the current record's "appointment_type" value
 * @method enum           getEventStatus()      Returns the current record's "event_status" value
 * @method boolean        getIsSynched()        Returns the current record's "is_synched" value
 * @method LabEquipment   getLabEquipment()     Returns the current record's "LabEquipment" value
 * @method LabUser        getLabUser()          Returns the current record's "LabUser" value
 * @method LabAppointment setEquipmentId()      Sets the current record's "equipment_id" value
 * @method LabAppointment setUserId()           Sets the current record's "user_id" value
 * @method LabAppointment setAppointmentDate()  Sets the current record's "appointment_date" value
 * @method LabAppointment setStartsAt()         Sets the current record's "starts_at" value
 * @method LabAppointment setEndsAt()           Sets the current record's "ends_at" value
 * @method LabAppointment setAppointmentType()  Sets the current record's "appointment_type" value
 * @method LabAppointment setEventStatus()      Sets the current record's "event_status" value
 * @method LabAppointment setIsSynched()        Sets the current record's "is_synched" value
 * @method LabAppointment setLabEquipment()     Sets the current record's "LabEquipment" value
 * @method LabAppointment setLabUser()          Sets the current record's "LabUser" value
 * 
 * @package    BookEquip
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseLabAppointment extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('lab_appointment');
        $this->hasColumn('equipment_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('appointment_date', 'date', null, array(
             'type' => 'date',
             'notnull' => true,
             ));
        $this->hasColumn('starts_at', 'time', null, array(
             'type' => 'time',
             'notnull' => true,
             ));
        $this->hasColumn('ends_at', 'time', null, array(
             'type' => 'time',
             'notnull' => true,
             ));
        $this->hasColumn('appointment_type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'basic',
              1 => 'advanced',
             ),
             ));
        $this->hasColumn('event_status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'approved',
              1 => 'pending',
              2 => 'billed',
             ),
             ));
        $this->hasColumn('is_synched', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('LabEquipment', array(
             'local' => 'equipment_id',
             'foreign' => 'id'));

        $this->hasOne('LabUser', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}